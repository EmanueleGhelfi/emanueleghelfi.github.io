I"÷9<p>I went through the last Facebook paper <a class="citation" href="#carion2020endtoend">(Carion et al., 2020)</a>, which proposes a new architecture, DETR, for object detection and segmentation based on Transformers. To better understand the paper, I decided to review the basic principles of Transformers and Attention. I am not pretending to write the best article on Transformers on the Internet. I just want to reason a bit about Transformers and maybe present the underlying ideas simply and intuitively.</p>

<h1 id="transformers">Transformers</h1>

<center>
<img src="/blog/figs/detr/transformers.jpg" />
</center>

<p>Transformers <a class="citation" href="#vaswani_attention_2017">(Vaswani et al., 2017)</a> are a deep learning architecture based on the <strong>attention</strong> mechanism. They are usually applied to <strong>sequential</strong> data in NLP tasks. Attention relates different positions of a single sequence in order to compute a meaningful representation of the sequence.</p>

<p>Characteristics:</p>

<ul>
  <li><a href="#attention">Attention</a></li>
  <li><a href="#encoder-decoder">Encoder-Decoder stack</a></li>
  <li><a href="#positional-encoding">Positional encoding</a></li>
</ul>

<h2 id="attention">Attention</h2>

<p>The attention function has different inputs in the form of vectors:</p>

<ul>
  <li><strong>query</strong> (denoted as \(q\))</li>
  <li><strong>key</strong>-<strong>value</strong> pairs (denoted as \(k\) and \(v\))</li>
</ul>

<p>The output is computed as a <strong>weighted</strong> sum of the values based on the key similarity with respect to the query.
It can be described as a retrieval mechanism in which the keys may not be exactly equal to the query. Here, the key similarity is obtained through a compatibility function of the query and the keys.</p>

<p><strong>How to obtain a similarity (or compatibility) score?</strong></p>

<p>This is very easy, you need just to compute the dot product of two vectors. So, let us say you want to compute the similarity of the vectors \(q \in \mathcal{R}^n\) and \(k \in \mathcal{R}^n\):</p>

\[Sim(q, k) = q \cdot k^T .\]

<p>If we have one query and multiple keys we can multiply the query vector with all keys arranged in a matrix, denoted as \(K \in \mathcal{R}^{d \times n}\):</p>

\[Sim(q, K) = q \cdot K^T = [Sim(q, k_1), Sim(q, k_2), \dots, Sim(q, k_n)] \in \mathcal{R}^d\]

<p>If we have multiple queries and multiple keys we can also arrange the queries in a matrix \(Q \in \mathcal{R}^{m \times n}\):</p>

\[Sim(Q, K) = Q \cdot K^T = \left[ \begin{array}{ccc}
      Sim(q_1, k_1) &amp; \cdots &amp; Sim(q_1, k_n) \\
      \vdots &amp; \ddots &amp; \vdots \\ 
      Sim(q_m, k_1) &amp; \cdots &amp; Sim(q_m, k_n)
    \end{array}  \right]\]

<p>Notice that \(Sim(Q, K) \in \mathcal{R}^{m \times d}\).</p>

<p>To understand better the attention as information retrieval mechanism, it is useful to think in these terms.</p>

<p>Let us say we have 3 keys, corresponding to the vectors forming angles of 0, 45 and 90 degrees. Suppose to have a query vector forming an angle of 60 degree. The keys are visualized in blue and the query in red:</p>

<center>
<img src="/blog/figs/detr/attention_vectors.png" style="width: 50%;" alt="Attention vectors" />
</center>

<p>As we can see, the query is similar to keys \(k_2\) and \(k_3\). To quantify the similarity, we calculate the dot product between the query and the keys matrix:</p>

<div>
$$
q K^T = [ \underbrace{0.5}_{\color{red}{q} \cdot \color{blue}{k_1}^T} \; \underbrace{0.96}_{\color{red}{q} \cdot \color{blue}{k_2}^T} \; \underbrace{0.86}_{\color{red}{q} \cdot \color{blue}{k_3}^T} ]
$$
</div>

<p>To normalize the similarity matrix, we can apply the \(softmax\) function, obtaining the attention weights:</p>

<div>
$$
\text{softmax}(q K^T) = [\underbrace{0.24}_{\color{orange}{w_1}} \; \underbrace{0.39}_{\color{orange}{w_2}} \; \underbrace{0.35}_{\color{orange}{w_3}}]
$$
</div>

<p>For larger values of \(n\), query and key dimension, the dot product grows large in magnitude and pushes the softmax (see later) in regions with small gradients.
To overcome this limitation, we divide each element of the similarity matrix by \(\sqrt{n}\), the dimension of the query and the key. The attention weights scaled are simply the weights obtained applying the softmax function to the similarity matrix scaled.</p>

<p><strong>Attention Score</strong></p>

<p>Using the softmax we find the weights associated to each value, we can then multiply the weghts by the values obtaining the attention score:</p>

\[\text{Attention}(Q, K, V) = \text{softmax} \left( \frac{QK^T}{\sqrt{n}} \right) V \in \mathcal{R}^{m \times u}\]

<p>where \(V \in \mathcal{R}^{d \times u}\).</p>

<center>
<figure>
<img src="/blog/figs/detr/attention.png" />
<figcaption>Attention Block.</figcaption>
</figure>
</center>

<p>Going back to our example we can summarize the whole mechanism with the following diagram:</p>

<p><img src="/blog/figs/detr/attention_diagram.svg" alt="attention_diagram" /></p>

<p>From the query vector and the keys we calculate the attention weights, we can then use the attention weights associated to each key to weight the corresponding value.</p>

<p><strong>Multi-Head Attention</strong></p>

<p>Multi-Head attention refers to the computation of \(h\) attention scores starting from linear projections of the input vectors. These linear projections are learned during training.</p>

<center>
<figure>
<img src="/blog/figs/detr/multi_head_attention.png" />
<figcaption>Multi Head Attention Block.</figcaption>
</figure>
</center>

<p><strong>Why Multi-Head Attention?</strong></p>

<p>Using Multi-Head attention the model can exploit different input representations to attend different positions.</p>

<p><strong>Why Linear Projection?</strong></p>

<p>The Linear Projection of the keys and the query is a very important characteristic of the attention mechanism. If we keep the query and key fixed we will end up in learning nothing. A learnable projection is highly fundamental. In this way the input can adapt to the keys and can understand what is important to ask. If we think of the keys as representing attributes of the input sentence, our learned query can ask important attributes for the decoding part.</p>

<p><strong>Self-Attention</strong></p>

<p>In a self-attention layer the keys, values and queries are all the same:</p>

\[\text{Self-Attention}(X) = \text{Attention}(X, X, X)\]

<p><strong>Linear Projection in a Self-Attention Layer</strong></p>

<p>In a self-attention layer the linear projection becomes more important. If we compute the self-attention using only the embedding we would only use the similarity defined by the embedding. Using a linear projection we let the embedding to adapt to the specific task. In this way the similarity between inputs can be learned during training. At the same time, learning values can be beneficial as they represent important attributes of the input.</p>

<h2 id="encoder-decoder">Encoder-Decoder</h2>

<p>The Transformer model is made of two parts: an Encoder and a Decoder.</p>

<p><strong>Encoder</strong></p>

<p>The Encoder is a stack of N blocks. Each block is made of two layers:</p>

<ul>
  <li>Multi-Head (Self-)Attention</li>
  <li>Position-wise Feed Forward Network (FFN)</li>
</ul>

<p>In addition, the original Transformer uses Residual connections and Layer Normalization.</p>

<p>The Encoder takes the inputs, and it converts it into a latent representation. In the context of NLP, the inputs are the tokenized words projected into an embedding.</p>

<p>A position-wise FFN is a FFN applied to each position in an independent way. Across the same layer, the parameters are shared. This is equivalent to a convolution with kernel size 1.</p>

<p><strong>Decoder</strong></p>

<p>The decoder is a stack of N blocks. Each block is composed of:</p>

<ul>
  <li>Multi-Head (Self-)Attention considering the outputs</li>
  <li>Multi-Head Attention considering the output of the encoder</li>
  <li>Position-wise FFN</li>
</ul>

<p>Similarly to the encoder, the decoder uses Residual connections and Layer Normalization.</p>

<p>In a Machine Translation task, the decoder generates token sequentially like an autoregressive model. It starts from the initial token, and it generates a distribution over the next token. The token associated with the highest probability is selected and fed again in the decoder. During this process, the decoder can attend at each position of the output generate up to the current one.</p>

<p><strong>Attention in Transformer</strong></p>

<p>There are three different attention applications in the transformer model:</p>

<ul>
  <li>
    <p>Encoder <strong>self</strong>-attention. The key, values and queries are the same and comes from the previous layer of the encoder. Motivation: in this way, the encoder can <strong>attend</strong> to different positions of the previous layer.</p>
  </li>
  <li>
    <p>Encoder-decoder <strong>attention</strong>. The output of the encoder is used as keys and values, while the queries come from the previous layer of the decoder. This is a very interesting technique. The encoder can suggest interesting keys and values; we can think of them as attributes of the input sequence. The decoder can ask through the query some properties it is interested in. This allows the decoder to <strong>attend</strong> different positions of the input sequence.</p>
  </li>
  <li>
    <p>Decoder <strong>self</strong>-attention. The self-attention layer of the decoder allows the encoder to attend all the generated positions up to and including the current position.</p>
  </li>
</ul>

<h2 id="positional-encoding">Positional Encoding</h2>

<p>The transformer model contains no information about the element position. The inputs are fed into the encoder without keeping the structure in the sentence. Positional-encoding is a rather simple trick to help the network to understand the order of tokens in the sequence. Positional encoding can be learned or fixed.</p>

<p>The paper uses trigonometric functions of different frequencies to encode each position in a differentiable manner:</p>

\[PE(pos, 2i) = \sin \left( \frac{pos}{1e5^{2i/n}} \right) \\
PE(pos, 2i+1) = \cos \left( \frac{pos}{1e5^{2i/n}} \right) ,\]

<p>where \(pos\) is the position and \(i\) is the dimension. Each dimension of the positional encoding corresponds to a sinusoid.</p>

<p>It is useful to visualize each dimension of the positional encoding as a sinusoid. The positional encoding of a determined position is the value of all the sinusoids in that position.</p>

<center>
<img src="/blog/figs/detr/positional_encoding.png" />
</center>

<p>For the sake of visualization, we can arrange the positional encodings in a grid obtaining the following plot:</p>

<center>
<figure>
  <img src="/blog/figs/detr/positional_encoding_colormesh.png" style="width: 80%;" alt="Figure 1 - Positional Encoding" />
  <figcaption>
    Positional Encoding, from <a href="http://tensorflow.org/tutorials/text/transformer">TensorFlow Tutorial</a>
  </figcaption>
</figure>
</center>

<h2 id="transformers-vs-lstm">Transformers vs LSTM</h2>

<p>Prior to Transformers, the most used architecture for sequence to sequence learning was the LSTM <a class="citation" href="#hochreiter_long_1997">(Hochreiter &amp; Schmidhuber, 1997)</a>. It is beneficial to understand the differences between these two architectures.</p>

<h3 id="input-handling">Input Handling</h3>

<p><strong>LSTM</strong></p>

<p>In an LSTM, the input is analyzed in a sequential fashion, starting from the first token and going on. It is also possible to use a Bidirectional LSTM that analyzes the input from both directions (forward and backward).</p>

<p><strong>Transformer</strong></p>

<p>The transformer processes each input token at the same. Transformers exploit the positional encoding to understand the input structure.</p>

<h3 id="gradient-flow">Gradient Flow</h3>

<p><strong>LSTM</strong></p>

<p>In an LSTM, the path from an input token to the output depends on the position of the token. The input token goes through a sequence of transformations before being projected in the latent representation. In an LSTM layer, there are \(n\) sequential operations, where \(n\) denotes the sequence length. The number of operations that connects two input positions is proportional to their distance in the sentence.</p>

<p><strong>Transformers</strong></p>

<p>In a Transformer, the path from an input token to the output is shorter, and it does not depend on the input length. This allows transformers to be able to process longer sequences. In an self-attention layer, there is a constant number of sequential operations, not depending on the sequence length. In addition, in a self-attention layer, each input position is connected to the other positions through a single operation.</p>

<h3 id="output-generation">Output Generation</h3>

<p>The output generation of LSTM and Transformer is very similar. Both generate token sequentially, and the current generated token is used to predict the next token.</p>

<h2 id="other-attention-applications">Other Attention Applications</h2>

<h3 id="self-attention-generative-adversarial-networks">Self-Attention Generative Adversarial Networks</h3>

<p>Self-Attention Generative Adversarial Networks {$ cite Han18 %} employ the Self-Attention mechanism to use global information both in the generator and in the discriminator. GANs are usually based on convolutional building blocks, that</p>

<h2 id="resources">Resources</h2>

<ul>
  <li><a href="https://www.youtube.com/watch?v=iDulhoQ2pro">Attention is All You Need</a> by Yannic Kilcher</li>
  <li><a href="https://www.tensorflow.org/tutorials/text/transformer">Transformer model for language understanding</a>, TensorFlow Tutorial</li>
  <li><a href="http://jalammar.github.io/illustrated-transformer/">The Illustrated Transformer</a> by Jay Alammar</li>
</ul>

<h2 id="references">References</h2>

<ol class="bibliography"><li><abbr>[carion2020endtoend]</abbr> <span id="carion2020endtoend">Carion, N., Massa, F., Synnaeve, G., Usunier, N., Kirillov, A., &amp; Zagoruyko, S. (2020). <i>End-to-End Object Detection with Transformers</i>.</span></li>
<li><abbr>[vaswani_attention_2017]</abbr> <span id="vaswani_attention_2017">Vaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A. N., Kaiser, L., &amp; Polosukhin, I. (2017). Attention Is All You Need. <i>ArXiv:1706.03762 [Cs]</i>. http://arxiv.org/abs/1706.03762</span></li>
<li><abbr>[hochreiter_long_1997]</abbr> <span id="hochreiter_long_1997">Hochreiter, S., &amp; Schmidhuber, J. (1997). Long Short-Term Memory. <i>Neural Computation</i>, <i>9</i>(8), 1735â1780. https://doi.org/10.1162/neco.1997.9.8.1735</span></li></ol>
:ET